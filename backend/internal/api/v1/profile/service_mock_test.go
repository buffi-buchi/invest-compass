// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package profile

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/buffi-buchi/invest-compass/backend/internal/domain/model"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// ServiceMock implements Service
type ServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGeByUserID          func(ctx context.Context, userID uuid.UUID, limit int64, offset int64) (pa1 []model.Profile, err error)
	funcGeByUserIDOrigin    string
	inspectFuncGeByUserID   func(ctx context.Context, userID uuid.UUID, limit int64, offset int64)
	afterGeByUserIDCounter  uint64
	beforeGeByUserIDCounter uint64
	GeByUserIDMock          mServiceMockGeByUserID
}

// NewServiceMock returns a mock for Service
func NewServiceMock(t minimock.Tester) *ServiceMock {
	m := &ServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GeByUserIDMock = mServiceMockGeByUserID{mock: m}
	m.GeByUserIDMock.callArgs = []*ServiceMockGeByUserIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mServiceMockGeByUserID struct {
	optional           bool
	mock               *ServiceMock
	defaultExpectation *ServiceMockGeByUserIDExpectation
	expectations       []*ServiceMockGeByUserIDExpectation

	callArgs []*ServiceMockGeByUserIDParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ServiceMockGeByUserIDExpectation specifies expectation struct of the Service.GeByUserID
type ServiceMockGeByUserIDExpectation struct {
	mock               *ServiceMock
	params             *ServiceMockGeByUserIDParams
	paramPtrs          *ServiceMockGeByUserIDParamPtrs
	expectationOrigins ServiceMockGeByUserIDExpectationOrigins
	results            *ServiceMockGeByUserIDResults
	returnOrigin       string
	Counter            uint64
}

// ServiceMockGeByUserIDParams contains parameters of the Service.GeByUserID
type ServiceMockGeByUserIDParams struct {
	ctx    context.Context
	userID uuid.UUID
	limit  int64
	offset int64
}

// ServiceMockGeByUserIDParamPtrs contains pointers to parameters of the Service.GeByUserID
type ServiceMockGeByUserIDParamPtrs struct {
	ctx    *context.Context
	userID *uuid.UUID
	limit  *int64
	offset *int64
}

// ServiceMockGeByUserIDResults contains results of the Service.GeByUserID
type ServiceMockGeByUserIDResults struct {
	pa1 []model.Profile
	err error
}

// ServiceMockGeByUserIDOrigins contains origins of expectations of the Service.GeByUserID
type ServiceMockGeByUserIDExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserID string
	originLimit  string
	originOffset string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGeByUserID *mServiceMockGeByUserID) Optional() *mServiceMockGeByUserID {
	mmGeByUserID.optional = true
	return mmGeByUserID
}

// Expect sets up expected params for Service.GeByUserID
func (mmGeByUserID *mServiceMockGeByUserID) Expect(ctx context.Context, userID uuid.UUID, limit int64, offset int64) *mServiceMockGeByUserID {
	if mmGeByUserID.mock.funcGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Set")
	}

	if mmGeByUserID.defaultExpectation == nil {
		mmGeByUserID.defaultExpectation = &ServiceMockGeByUserIDExpectation{}
	}

	if mmGeByUserID.defaultExpectation.paramPtrs != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by ExpectParams functions")
	}

	mmGeByUserID.defaultExpectation.params = &ServiceMockGeByUserIDParams{ctx, userID, limit, offset}
	mmGeByUserID.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGeByUserID.expectations {
		if minimock.Equal(e.params, mmGeByUserID.defaultExpectation.params) {
			mmGeByUserID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGeByUserID.defaultExpectation.params)
		}
	}

	return mmGeByUserID
}

// ExpectCtxParam1 sets up expected param ctx for Service.GeByUserID
func (mmGeByUserID *mServiceMockGeByUserID) ExpectCtxParam1(ctx context.Context) *mServiceMockGeByUserID {
	if mmGeByUserID.mock.funcGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Set")
	}

	if mmGeByUserID.defaultExpectation == nil {
		mmGeByUserID.defaultExpectation = &ServiceMockGeByUserIDExpectation{}
	}

	if mmGeByUserID.defaultExpectation.params != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Expect")
	}

	if mmGeByUserID.defaultExpectation.paramPtrs == nil {
		mmGeByUserID.defaultExpectation.paramPtrs = &ServiceMockGeByUserIDParamPtrs{}
	}
	mmGeByUserID.defaultExpectation.paramPtrs.ctx = &ctx
	mmGeByUserID.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGeByUserID
}

// ExpectUserIDParam2 sets up expected param userID for Service.GeByUserID
func (mmGeByUserID *mServiceMockGeByUserID) ExpectUserIDParam2(userID uuid.UUID) *mServiceMockGeByUserID {
	if mmGeByUserID.mock.funcGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Set")
	}

	if mmGeByUserID.defaultExpectation == nil {
		mmGeByUserID.defaultExpectation = &ServiceMockGeByUserIDExpectation{}
	}

	if mmGeByUserID.defaultExpectation.params != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Expect")
	}

	if mmGeByUserID.defaultExpectation.paramPtrs == nil {
		mmGeByUserID.defaultExpectation.paramPtrs = &ServiceMockGeByUserIDParamPtrs{}
	}
	mmGeByUserID.defaultExpectation.paramPtrs.userID = &userID
	mmGeByUserID.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmGeByUserID
}

// ExpectLimitParam3 sets up expected param limit for Service.GeByUserID
func (mmGeByUserID *mServiceMockGeByUserID) ExpectLimitParam3(limit int64) *mServiceMockGeByUserID {
	if mmGeByUserID.mock.funcGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Set")
	}

	if mmGeByUserID.defaultExpectation == nil {
		mmGeByUserID.defaultExpectation = &ServiceMockGeByUserIDExpectation{}
	}

	if mmGeByUserID.defaultExpectation.params != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Expect")
	}

	if mmGeByUserID.defaultExpectation.paramPtrs == nil {
		mmGeByUserID.defaultExpectation.paramPtrs = &ServiceMockGeByUserIDParamPtrs{}
	}
	mmGeByUserID.defaultExpectation.paramPtrs.limit = &limit
	mmGeByUserID.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmGeByUserID
}

// ExpectOffsetParam4 sets up expected param offset for Service.GeByUserID
func (mmGeByUserID *mServiceMockGeByUserID) ExpectOffsetParam4(offset int64) *mServiceMockGeByUserID {
	if mmGeByUserID.mock.funcGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Set")
	}

	if mmGeByUserID.defaultExpectation == nil {
		mmGeByUserID.defaultExpectation = &ServiceMockGeByUserIDExpectation{}
	}

	if mmGeByUserID.defaultExpectation.params != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Expect")
	}

	if mmGeByUserID.defaultExpectation.paramPtrs == nil {
		mmGeByUserID.defaultExpectation.paramPtrs = &ServiceMockGeByUserIDParamPtrs{}
	}
	mmGeByUserID.defaultExpectation.paramPtrs.offset = &offset
	mmGeByUserID.defaultExpectation.expectationOrigins.originOffset = minimock.CallerInfo(1)

	return mmGeByUserID
}

// Inspect accepts an inspector function that has same arguments as the Service.GeByUserID
func (mmGeByUserID *mServiceMockGeByUserID) Inspect(f func(ctx context.Context, userID uuid.UUID, limit int64, offset int64)) *mServiceMockGeByUserID {
	if mmGeByUserID.mock.inspectFuncGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("Inspect function is already set for ServiceMock.GeByUserID")
	}

	mmGeByUserID.mock.inspectFuncGeByUserID = f

	return mmGeByUserID
}

// Return sets up results that will be returned by Service.GeByUserID
func (mmGeByUserID *mServiceMockGeByUserID) Return(pa1 []model.Profile, err error) *ServiceMock {
	if mmGeByUserID.mock.funcGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Set")
	}

	if mmGeByUserID.defaultExpectation == nil {
		mmGeByUserID.defaultExpectation = &ServiceMockGeByUserIDExpectation{mock: mmGeByUserID.mock}
	}
	mmGeByUserID.defaultExpectation.results = &ServiceMockGeByUserIDResults{pa1, err}
	mmGeByUserID.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGeByUserID.mock
}

// Set uses given function f to mock the Service.GeByUserID method
func (mmGeByUserID *mServiceMockGeByUserID) Set(f func(ctx context.Context, userID uuid.UUID, limit int64, offset int64) (pa1 []model.Profile, err error)) *ServiceMock {
	if mmGeByUserID.defaultExpectation != nil {
		mmGeByUserID.mock.t.Fatalf("Default expectation is already set for the Service.GeByUserID method")
	}

	if len(mmGeByUserID.expectations) > 0 {
		mmGeByUserID.mock.t.Fatalf("Some expectations are already set for the Service.GeByUserID method")
	}

	mmGeByUserID.mock.funcGeByUserID = f
	mmGeByUserID.mock.funcGeByUserIDOrigin = minimock.CallerInfo(1)
	return mmGeByUserID.mock
}

// When sets expectation for the Service.GeByUserID which will trigger the result defined by the following
// Then helper
func (mmGeByUserID *mServiceMockGeByUserID) When(ctx context.Context, userID uuid.UUID, limit int64, offset int64) *ServiceMockGeByUserIDExpectation {
	if mmGeByUserID.mock.funcGeByUserID != nil {
		mmGeByUserID.mock.t.Fatalf("ServiceMock.GeByUserID mock is already set by Set")
	}

	expectation := &ServiceMockGeByUserIDExpectation{
		mock:               mmGeByUserID.mock,
		params:             &ServiceMockGeByUserIDParams{ctx, userID, limit, offset},
		expectationOrigins: ServiceMockGeByUserIDExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGeByUserID.expectations = append(mmGeByUserID.expectations, expectation)
	return expectation
}

// Then sets up Service.GeByUserID return parameters for the expectation previously defined by the When method
func (e *ServiceMockGeByUserIDExpectation) Then(pa1 []model.Profile, err error) *ServiceMock {
	e.results = &ServiceMockGeByUserIDResults{pa1, err}
	return e.mock
}

// Times sets number of times Service.GeByUserID should be invoked
func (mmGeByUserID *mServiceMockGeByUserID) Times(n uint64) *mServiceMockGeByUserID {
	if n == 0 {
		mmGeByUserID.mock.t.Fatalf("Times of ServiceMock.GeByUserID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGeByUserID.expectedInvocations, n)
	mmGeByUserID.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGeByUserID
}

func (mmGeByUserID *mServiceMockGeByUserID) invocationsDone() bool {
	if len(mmGeByUserID.expectations) == 0 && mmGeByUserID.defaultExpectation == nil && mmGeByUserID.mock.funcGeByUserID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGeByUserID.mock.afterGeByUserIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGeByUserID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GeByUserID implements Service
func (mmGeByUserID *ServiceMock) GeByUserID(ctx context.Context, userID uuid.UUID, limit int64, offset int64) (pa1 []model.Profile, err error) {
	mm_atomic.AddUint64(&mmGeByUserID.beforeGeByUserIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGeByUserID.afterGeByUserIDCounter, 1)

	mmGeByUserID.t.Helper()

	if mmGeByUserID.inspectFuncGeByUserID != nil {
		mmGeByUserID.inspectFuncGeByUserID(ctx, userID, limit, offset)
	}

	mm_params := ServiceMockGeByUserIDParams{ctx, userID, limit, offset}

	// Record call args
	mmGeByUserID.GeByUserIDMock.mutex.Lock()
	mmGeByUserID.GeByUserIDMock.callArgs = append(mmGeByUserID.GeByUserIDMock.callArgs, &mm_params)
	mmGeByUserID.GeByUserIDMock.mutex.Unlock()

	for _, e := range mmGeByUserID.GeByUserIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmGeByUserID.GeByUserIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGeByUserID.GeByUserIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGeByUserID.GeByUserIDMock.defaultExpectation.params
		mm_want_ptrs := mmGeByUserID.GeByUserIDMock.defaultExpectation.paramPtrs

		mm_got := ServiceMockGeByUserIDParams{ctx, userID, limit, offset}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGeByUserID.t.Errorf("ServiceMock.GeByUserID got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGeByUserID.GeByUserIDMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGeByUserID.t.Errorf("ServiceMock.GeByUserID got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGeByUserID.GeByUserIDMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmGeByUserID.t.Errorf("ServiceMock.GeByUserID got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGeByUserID.GeByUserIDMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

			if mm_want_ptrs.offset != nil && !minimock.Equal(*mm_want_ptrs.offset, mm_got.offset) {
				mmGeByUserID.t.Errorf("ServiceMock.GeByUserID got unexpected parameter offset, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGeByUserID.GeByUserIDMock.defaultExpectation.expectationOrigins.originOffset, *mm_want_ptrs.offset, mm_got.offset, minimock.Diff(*mm_want_ptrs.offset, mm_got.offset))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGeByUserID.t.Errorf("ServiceMock.GeByUserID got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGeByUserID.GeByUserIDMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGeByUserID.GeByUserIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGeByUserID.t.Fatal("No results are set for the ServiceMock.GeByUserID")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmGeByUserID.funcGeByUserID != nil {
		return mmGeByUserID.funcGeByUserID(ctx, userID, limit, offset)
	}
	mmGeByUserID.t.Fatalf("Unexpected call to ServiceMock.GeByUserID. %v %v %v %v", ctx, userID, limit, offset)
	return
}

// GeByUserIDAfterCounter returns a count of finished ServiceMock.GeByUserID invocations
func (mmGeByUserID *ServiceMock) GeByUserIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGeByUserID.afterGeByUserIDCounter)
}

// GeByUserIDBeforeCounter returns a count of ServiceMock.GeByUserID invocations
func (mmGeByUserID *ServiceMock) GeByUserIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGeByUserID.beforeGeByUserIDCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.GeByUserID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGeByUserID *mServiceMockGeByUserID) Calls() []*ServiceMockGeByUserIDParams {
	mmGeByUserID.mutex.RLock()

	argCopy := make([]*ServiceMockGeByUserIDParams, len(mmGeByUserID.callArgs))
	copy(argCopy, mmGeByUserID.callArgs)

	mmGeByUserID.mutex.RUnlock()

	return argCopy
}

// MinimockGeByUserIDDone returns true if the count of the GeByUserID invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockGeByUserIDDone() bool {
	if m.GeByUserIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GeByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GeByUserIDMock.invocationsDone()
}

// MinimockGeByUserIDInspect logs each unmet expectation
func (m *ServiceMock) MinimockGeByUserIDInspect() {
	for _, e := range m.GeByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.GeByUserID at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGeByUserIDCounter := mm_atomic.LoadUint64(&m.afterGeByUserIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GeByUserIDMock.defaultExpectation != nil && afterGeByUserIDCounter < 1 {
		if m.GeByUserIDMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ServiceMock.GeByUserID at\n%s", m.GeByUserIDMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ServiceMock.GeByUserID at\n%s with params: %#v", m.GeByUserIDMock.defaultExpectation.expectationOrigins.origin, *m.GeByUserIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGeByUserID != nil && afterGeByUserIDCounter < 1 {
		m.t.Errorf("Expected call to ServiceMock.GeByUserID at\n%s", m.funcGeByUserIDOrigin)
	}

	if !m.GeByUserIDMock.invocationsDone() && afterGeByUserIDCounter > 0 {
		m.t.Errorf("Expected %d calls to ServiceMock.GeByUserID at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GeByUserIDMock.expectedInvocations), m.GeByUserIDMock.expectedInvocationsOrigin, afterGeByUserIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGeByUserIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGeByUserIDDone()
}
