// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package auth

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/buffi-buchi/invest-compass/backend/internal/domain/model"
	"github.com/gojuno/minimock/v3"
)

// JWTProviderMock implements JWTProvider
type JWTProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerate          func(user model.User) (s1 string, err error)
	funcGenerateOrigin    string
	inspectFuncGenerate   func(user model.User)
	afterGenerateCounter  uint64
	beforeGenerateCounter uint64
	GenerateMock          mJWTProviderMockGenerate
}

// NewJWTProviderMock returns a mock for JWTProvider
func NewJWTProviderMock(t minimock.Tester) *JWTProviderMock {
	m := &JWTProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateMock = mJWTProviderMockGenerate{mock: m}
	m.GenerateMock.callArgs = []*JWTProviderMockGenerateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mJWTProviderMockGenerate struct {
	optional           bool
	mock               *JWTProviderMock
	defaultExpectation *JWTProviderMockGenerateExpectation
	expectations       []*JWTProviderMockGenerateExpectation

	callArgs []*JWTProviderMockGenerateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// JWTProviderMockGenerateExpectation specifies expectation struct of the JWTProvider.Generate
type JWTProviderMockGenerateExpectation struct {
	mock               *JWTProviderMock
	params             *JWTProviderMockGenerateParams
	paramPtrs          *JWTProviderMockGenerateParamPtrs
	expectationOrigins JWTProviderMockGenerateExpectationOrigins
	results            *JWTProviderMockGenerateResults
	returnOrigin       string
	Counter            uint64
}

// JWTProviderMockGenerateParams contains parameters of the JWTProvider.Generate
type JWTProviderMockGenerateParams struct {
	user model.User
}

// JWTProviderMockGenerateParamPtrs contains pointers to parameters of the JWTProvider.Generate
type JWTProviderMockGenerateParamPtrs struct {
	user *model.User
}

// JWTProviderMockGenerateResults contains results of the JWTProvider.Generate
type JWTProviderMockGenerateResults struct {
	s1  string
	err error
}

// JWTProviderMockGenerateOrigins contains origins of expectations of the JWTProvider.Generate
type JWTProviderMockGenerateExpectationOrigins struct {
	origin     string
	originUser string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerate *mJWTProviderMockGenerate) Optional() *mJWTProviderMockGenerate {
	mmGenerate.optional = true
	return mmGenerate
}

// Expect sets up expected params for JWTProvider.Generate
func (mmGenerate *mJWTProviderMockGenerate) Expect(user model.User) *mJWTProviderMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("JWTProviderMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &JWTProviderMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.paramPtrs != nil {
		mmGenerate.mock.t.Fatalf("JWTProviderMock.Generate mock is already set by ExpectParams functions")
	}

	mmGenerate.defaultExpectation.params = &JWTProviderMockGenerateParams{user}
	mmGenerate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGenerate.expectations {
		if minimock.Equal(e.params, mmGenerate.defaultExpectation.params) {
			mmGenerate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerate.defaultExpectation.params)
		}
	}

	return mmGenerate
}

// ExpectUserParam1 sets up expected param user for JWTProvider.Generate
func (mmGenerate *mJWTProviderMockGenerate) ExpectUserParam1(user model.User) *mJWTProviderMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("JWTProviderMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &JWTProviderMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("JWTProviderMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &JWTProviderMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.user = &user
	mmGenerate.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmGenerate
}

// Inspect accepts an inspector function that has same arguments as the JWTProvider.Generate
func (mmGenerate *mJWTProviderMockGenerate) Inspect(f func(user model.User)) *mJWTProviderMockGenerate {
	if mmGenerate.mock.inspectFuncGenerate != nil {
		mmGenerate.mock.t.Fatalf("Inspect function is already set for JWTProviderMock.Generate")
	}

	mmGenerate.mock.inspectFuncGenerate = f

	return mmGenerate
}

// Return sets up results that will be returned by JWTProvider.Generate
func (mmGenerate *mJWTProviderMockGenerate) Return(s1 string, err error) *JWTProviderMock {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("JWTProviderMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &JWTProviderMockGenerateExpectation{mock: mmGenerate.mock}
	}
	mmGenerate.defaultExpectation.results = &JWTProviderMockGenerateResults{s1, err}
	mmGenerate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerate.mock
}

// Set uses given function f to mock the JWTProvider.Generate method
func (mmGenerate *mJWTProviderMockGenerate) Set(f func(user model.User) (s1 string, err error)) *JWTProviderMock {
	if mmGenerate.defaultExpectation != nil {
		mmGenerate.mock.t.Fatalf("Default expectation is already set for the JWTProvider.Generate method")
	}

	if len(mmGenerate.expectations) > 0 {
		mmGenerate.mock.t.Fatalf("Some expectations are already set for the JWTProvider.Generate method")
	}

	mmGenerate.mock.funcGenerate = f
	mmGenerate.mock.funcGenerateOrigin = minimock.CallerInfo(1)
	return mmGenerate.mock
}

// When sets expectation for the JWTProvider.Generate which will trigger the result defined by the following
// Then helper
func (mmGenerate *mJWTProviderMockGenerate) When(user model.User) *JWTProviderMockGenerateExpectation {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("JWTProviderMock.Generate mock is already set by Set")
	}

	expectation := &JWTProviderMockGenerateExpectation{
		mock:               mmGenerate.mock,
		params:             &JWTProviderMockGenerateParams{user},
		expectationOrigins: JWTProviderMockGenerateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGenerate.expectations = append(mmGenerate.expectations, expectation)
	return expectation
}

// Then sets up JWTProvider.Generate return parameters for the expectation previously defined by the When method
func (e *JWTProviderMockGenerateExpectation) Then(s1 string, err error) *JWTProviderMock {
	e.results = &JWTProviderMockGenerateResults{s1, err}
	return e.mock
}

// Times sets number of times JWTProvider.Generate should be invoked
func (mmGenerate *mJWTProviderMockGenerate) Times(n uint64) *mJWTProviderMockGenerate {
	if n == 0 {
		mmGenerate.mock.t.Fatalf("Times of JWTProviderMock.Generate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerate.expectedInvocations, n)
	mmGenerate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerate
}

func (mmGenerate *mJWTProviderMockGenerate) invocationsDone() bool {
	if len(mmGenerate.expectations) == 0 && mmGenerate.defaultExpectation == nil && mmGenerate.mock.funcGenerate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerate.mock.afterGenerateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Generate implements JWTProvider
func (mmGenerate *JWTProviderMock) Generate(user model.User) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerate.beforeGenerateCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerate.afterGenerateCounter, 1)

	mmGenerate.t.Helper()

	if mmGenerate.inspectFuncGenerate != nil {
		mmGenerate.inspectFuncGenerate(user)
	}

	mm_params := JWTProviderMockGenerateParams{user}

	// Record call args
	mmGenerate.GenerateMock.mutex.Lock()
	mmGenerate.GenerateMock.callArgs = append(mmGenerate.GenerateMock.callArgs, &mm_params)
	mmGenerate.GenerateMock.mutex.Unlock()

	for _, e := range mmGenerate.GenerateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerate.GenerateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerate.GenerateMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerate.GenerateMock.defaultExpectation.params
		mm_want_ptrs := mmGenerate.GenerateMock.defaultExpectation.paramPtrs

		mm_got := JWTProviderMockGenerateParams{user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmGenerate.t.Errorf("JWTProviderMock.Generate got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerate.GenerateMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerate.t.Errorf("JWTProviderMock.Generate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGenerate.GenerateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerate.GenerateMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerate.t.Fatal("No results are set for the JWTProviderMock.Generate")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerate.funcGenerate != nil {
		return mmGenerate.funcGenerate(user)
	}
	mmGenerate.t.Fatalf("Unexpected call to JWTProviderMock.Generate. %v", user)
	return
}

// GenerateAfterCounter returns a count of finished JWTProviderMock.Generate invocations
func (mmGenerate *JWTProviderMock) GenerateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.afterGenerateCounter)
}

// GenerateBeforeCounter returns a count of JWTProviderMock.Generate invocations
func (mmGenerate *JWTProviderMock) GenerateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.beforeGenerateCounter)
}

// Calls returns a list of arguments used in each call to JWTProviderMock.Generate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerate *mJWTProviderMockGenerate) Calls() []*JWTProviderMockGenerateParams {
	mmGenerate.mutex.RLock()

	argCopy := make([]*JWTProviderMockGenerateParams, len(mmGenerate.callArgs))
	copy(argCopy, mmGenerate.callArgs)

	mmGenerate.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateDone returns true if the count of the Generate invocations corresponds
// the number of defined expectations
func (m *JWTProviderMock) MinimockGenerateDone() bool {
	if m.GenerateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateMock.invocationsDone()
}

// MinimockGenerateInspect logs each unmet expectation
func (m *JWTProviderMock) MinimockGenerateInspect() {
	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to JWTProviderMock.Generate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGenerateCounter := mm_atomic.LoadUint64(&m.afterGenerateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateMock.defaultExpectation != nil && afterGenerateCounter < 1 {
		if m.GenerateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to JWTProviderMock.Generate at\n%s", m.GenerateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to JWTProviderMock.Generate at\n%s with params: %#v", m.GenerateMock.defaultExpectation.expectationOrigins.origin, *m.GenerateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerate != nil && afterGenerateCounter < 1 {
		m.t.Errorf("Expected call to JWTProviderMock.Generate at\n%s", m.funcGenerateOrigin)
	}

	if !m.GenerateMock.invocationsDone() && afterGenerateCounter > 0 {
		m.t.Errorf("Expected %d calls to JWTProviderMock.Generate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateMock.expectedInvocations), m.GenerateMock.expectedInvocationsOrigin, afterGenerateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *JWTProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *JWTProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *JWTProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateDone()
}
