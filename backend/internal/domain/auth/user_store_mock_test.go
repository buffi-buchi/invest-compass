// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package auth

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/buffi-buchi/invest-compass/backend/internal/domain/model"
	"github.com/gojuno/minimock/v3"
)

// UserStoreMock implements UserStore
type UserStoreMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetByEmail          func(ctx context.Context, email string) (u1 model.User, err error)
	funcGetByEmailOrigin    string
	inspectFuncGetByEmail   func(ctx context.Context, email string)
	afterGetByEmailCounter  uint64
	beforeGetByEmailCounter uint64
	GetByEmailMock          mUserStoreMockGetByEmail
}

// NewUserStoreMock returns a mock for UserStore
func NewUserStoreMock(t minimock.Tester) *UserStoreMock {
	m := &UserStoreMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByEmailMock = mUserStoreMockGetByEmail{mock: m}
	m.GetByEmailMock.callArgs = []*UserStoreMockGetByEmailParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserStoreMockGetByEmail struct {
	optional           bool
	mock               *UserStoreMock
	defaultExpectation *UserStoreMockGetByEmailExpectation
	expectations       []*UserStoreMockGetByEmailExpectation

	callArgs []*UserStoreMockGetByEmailParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserStoreMockGetByEmailExpectation specifies expectation struct of the UserStore.GetByEmail
type UserStoreMockGetByEmailExpectation struct {
	mock               *UserStoreMock
	params             *UserStoreMockGetByEmailParams
	paramPtrs          *UserStoreMockGetByEmailParamPtrs
	expectationOrigins UserStoreMockGetByEmailExpectationOrigins
	results            *UserStoreMockGetByEmailResults
	returnOrigin       string
	Counter            uint64
}

// UserStoreMockGetByEmailParams contains parameters of the UserStore.GetByEmail
type UserStoreMockGetByEmailParams struct {
	ctx   context.Context
	email string
}

// UserStoreMockGetByEmailParamPtrs contains pointers to parameters of the UserStore.GetByEmail
type UserStoreMockGetByEmailParamPtrs struct {
	ctx   *context.Context
	email *string
}

// UserStoreMockGetByEmailResults contains results of the UserStore.GetByEmail
type UserStoreMockGetByEmailResults struct {
	u1  model.User
	err error
}

// UserStoreMockGetByEmailOrigins contains origins of expectations of the UserStore.GetByEmail
type UserStoreMockGetByEmailExpectationOrigins struct {
	origin      string
	originCtx   string
	originEmail string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByEmail *mUserStoreMockGetByEmail) Optional() *mUserStoreMockGetByEmail {
	mmGetByEmail.optional = true
	return mmGetByEmail
}

// Expect sets up expected params for UserStore.GetByEmail
func (mmGetByEmail *mUserStoreMockGetByEmail) Expect(ctx context.Context, email string) *mUserStoreMockGetByEmail {
	if mmGetByEmail.mock.funcGetByEmail != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by Set")
	}

	if mmGetByEmail.defaultExpectation == nil {
		mmGetByEmail.defaultExpectation = &UserStoreMockGetByEmailExpectation{}
	}

	if mmGetByEmail.defaultExpectation.paramPtrs != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by ExpectParams functions")
	}

	mmGetByEmail.defaultExpectation.params = &UserStoreMockGetByEmailParams{ctx, email}
	mmGetByEmail.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetByEmail.expectations {
		if minimock.Equal(e.params, mmGetByEmail.defaultExpectation.params) {
			mmGetByEmail.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByEmail.defaultExpectation.params)
		}
	}

	return mmGetByEmail
}

// ExpectCtxParam1 sets up expected param ctx for UserStore.GetByEmail
func (mmGetByEmail *mUserStoreMockGetByEmail) ExpectCtxParam1(ctx context.Context) *mUserStoreMockGetByEmail {
	if mmGetByEmail.mock.funcGetByEmail != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by Set")
	}

	if mmGetByEmail.defaultExpectation == nil {
		mmGetByEmail.defaultExpectation = &UserStoreMockGetByEmailExpectation{}
	}

	if mmGetByEmail.defaultExpectation.params != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by Expect")
	}

	if mmGetByEmail.defaultExpectation.paramPtrs == nil {
		mmGetByEmail.defaultExpectation.paramPtrs = &UserStoreMockGetByEmailParamPtrs{}
	}
	mmGetByEmail.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetByEmail.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetByEmail
}

// ExpectEmailParam2 sets up expected param email for UserStore.GetByEmail
func (mmGetByEmail *mUserStoreMockGetByEmail) ExpectEmailParam2(email string) *mUserStoreMockGetByEmail {
	if mmGetByEmail.mock.funcGetByEmail != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by Set")
	}

	if mmGetByEmail.defaultExpectation == nil {
		mmGetByEmail.defaultExpectation = &UserStoreMockGetByEmailExpectation{}
	}

	if mmGetByEmail.defaultExpectation.params != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by Expect")
	}

	if mmGetByEmail.defaultExpectation.paramPtrs == nil {
		mmGetByEmail.defaultExpectation.paramPtrs = &UserStoreMockGetByEmailParamPtrs{}
	}
	mmGetByEmail.defaultExpectation.paramPtrs.email = &email
	mmGetByEmail.defaultExpectation.expectationOrigins.originEmail = minimock.CallerInfo(1)

	return mmGetByEmail
}

// Inspect accepts an inspector function that has same arguments as the UserStore.GetByEmail
func (mmGetByEmail *mUserStoreMockGetByEmail) Inspect(f func(ctx context.Context, email string)) *mUserStoreMockGetByEmail {
	if mmGetByEmail.mock.inspectFuncGetByEmail != nil {
		mmGetByEmail.mock.t.Fatalf("Inspect function is already set for UserStoreMock.GetByEmail")
	}

	mmGetByEmail.mock.inspectFuncGetByEmail = f

	return mmGetByEmail
}

// Return sets up results that will be returned by UserStore.GetByEmail
func (mmGetByEmail *mUserStoreMockGetByEmail) Return(u1 model.User, err error) *UserStoreMock {
	if mmGetByEmail.mock.funcGetByEmail != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by Set")
	}

	if mmGetByEmail.defaultExpectation == nil {
		mmGetByEmail.defaultExpectation = &UserStoreMockGetByEmailExpectation{mock: mmGetByEmail.mock}
	}
	mmGetByEmail.defaultExpectation.results = &UserStoreMockGetByEmailResults{u1, err}
	mmGetByEmail.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetByEmail.mock
}

// Set uses given function f to mock the UserStore.GetByEmail method
func (mmGetByEmail *mUserStoreMockGetByEmail) Set(f func(ctx context.Context, email string) (u1 model.User, err error)) *UserStoreMock {
	if mmGetByEmail.defaultExpectation != nil {
		mmGetByEmail.mock.t.Fatalf("Default expectation is already set for the UserStore.GetByEmail method")
	}

	if len(mmGetByEmail.expectations) > 0 {
		mmGetByEmail.mock.t.Fatalf("Some expectations are already set for the UserStore.GetByEmail method")
	}

	mmGetByEmail.mock.funcGetByEmail = f
	mmGetByEmail.mock.funcGetByEmailOrigin = minimock.CallerInfo(1)
	return mmGetByEmail.mock
}

// When sets expectation for the UserStore.GetByEmail which will trigger the result defined by the following
// Then helper
func (mmGetByEmail *mUserStoreMockGetByEmail) When(ctx context.Context, email string) *UserStoreMockGetByEmailExpectation {
	if mmGetByEmail.mock.funcGetByEmail != nil {
		mmGetByEmail.mock.t.Fatalf("UserStoreMock.GetByEmail mock is already set by Set")
	}

	expectation := &UserStoreMockGetByEmailExpectation{
		mock:               mmGetByEmail.mock,
		params:             &UserStoreMockGetByEmailParams{ctx, email},
		expectationOrigins: UserStoreMockGetByEmailExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetByEmail.expectations = append(mmGetByEmail.expectations, expectation)
	return expectation
}

// Then sets up UserStore.GetByEmail return parameters for the expectation previously defined by the When method
func (e *UserStoreMockGetByEmailExpectation) Then(u1 model.User, err error) *UserStoreMock {
	e.results = &UserStoreMockGetByEmailResults{u1, err}
	return e.mock
}

// Times sets number of times UserStore.GetByEmail should be invoked
func (mmGetByEmail *mUserStoreMockGetByEmail) Times(n uint64) *mUserStoreMockGetByEmail {
	if n == 0 {
		mmGetByEmail.mock.t.Fatalf("Times of UserStoreMock.GetByEmail mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByEmail.expectedInvocations, n)
	mmGetByEmail.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetByEmail
}

func (mmGetByEmail *mUserStoreMockGetByEmail) invocationsDone() bool {
	if len(mmGetByEmail.expectations) == 0 && mmGetByEmail.defaultExpectation == nil && mmGetByEmail.mock.funcGetByEmail == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByEmail.mock.afterGetByEmailCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByEmail.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByEmail implements UserStore
func (mmGetByEmail *UserStoreMock) GetByEmail(ctx context.Context, email string) (u1 model.User, err error) {
	mm_atomic.AddUint64(&mmGetByEmail.beforeGetByEmailCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByEmail.afterGetByEmailCounter, 1)

	mmGetByEmail.t.Helper()

	if mmGetByEmail.inspectFuncGetByEmail != nil {
		mmGetByEmail.inspectFuncGetByEmail(ctx, email)
	}

	mm_params := UserStoreMockGetByEmailParams{ctx, email}

	// Record call args
	mmGetByEmail.GetByEmailMock.mutex.Lock()
	mmGetByEmail.GetByEmailMock.callArgs = append(mmGetByEmail.GetByEmailMock.callArgs, &mm_params)
	mmGetByEmail.GetByEmailMock.mutex.Unlock()

	for _, e := range mmGetByEmail.GetByEmailMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetByEmail.GetByEmailMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByEmail.GetByEmailMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByEmail.GetByEmailMock.defaultExpectation.params
		mm_want_ptrs := mmGetByEmail.GetByEmailMock.defaultExpectation.paramPtrs

		mm_got := UserStoreMockGetByEmailParams{ctx, email}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByEmail.t.Errorf("UserStoreMock.GetByEmail got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByEmail.GetByEmailMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.email != nil && !minimock.Equal(*mm_want_ptrs.email, mm_got.email) {
				mmGetByEmail.t.Errorf("UserStoreMock.GetByEmail got unexpected parameter email, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByEmail.GetByEmailMock.defaultExpectation.expectationOrigins.originEmail, *mm_want_ptrs.email, mm_got.email, minimock.Diff(*mm_want_ptrs.email, mm_got.email))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByEmail.t.Errorf("UserStoreMock.GetByEmail got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetByEmail.GetByEmailMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByEmail.GetByEmailMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByEmail.t.Fatal("No results are set for the UserStoreMock.GetByEmail")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetByEmail.funcGetByEmail != nil {
		return mmGetByEmail.funcGetByEmail(ctx, email)
	}
	mmGetByEmail.t.Fatalf("Unexpected call to UserStoreMock.GetByEmail. %v %v", ctx, email)
	return
}

// GetByEmailAfterCounter returns a count of finished UserStoreMock.GetByEmail invocations
func (mmGetByEmail *UserStoreMock) GetByEmailAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByEmail.afterGetByEmailCounter)
}

// GetByEmailBeforeCounter returns a count of UserStoreMock.GetByEmail invocations
func (mmGetByEmail *UserStoreMock) GetByEmailBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByEmail.beforeGetByEmailCounter)
}

// Calls returns a list of arguments used in each call to UserStoreMock.GetByEmail.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByEmail *mUserStoreMockGetByEmail) Calls() []*UserStoreMockGetByEmailParams {
	mmGetByEmail.mutex.RLock()

	argCopy := make([]*UserStoreMockGetByEmailParams, len(mmGetByEmail.callArgs))
	copy(argCopy, mmGetByEmail.callArgs)

	mmGetByEmail.mutex.RUnlock()

	return argCopy
}

// MinimockGetByEmailDone returns true if the count of the GetByEmail invocations corresponds
// the number of defined expectations
func (m *UserStoreMock) MinimockGetByEmailDone() bool {
	if m.GetByEmailMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByEmailMock.invocationsDone()
}

// MinimockGetByEmailInspect logs each unmet expectation
func (m *UserStoreMock) MinimockGetByEmailInspect() {
	for _, e := range m.GetByEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserStoreMock.GetByEmail at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetByEmailCounter := mm_atomic.LoadUint64(&m.afterGetByEmailCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByEmailMock.defaultExpectation != nil && afterGetByEmailCounter < 1 {
		if m.GetByEmailMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserStoreMock.GetByEmail at\n%s", m.GetByEmailMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserStoreMock.GetByEmail at\n%s with params: %#v", m.GetByEmailMock.defaultExpectation.expectationOrigins.origin, *m.GetByEmailMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByEmail != nil && afterGetByEmailCounter < 1 {
		m.t.Errorf("Expected call to UserStoreMock.GetByEmail at\n%s", m.funcGetByEmailOrigin)
	}

	if !m.GetByEmailMock.invocationsDone() && afterGetByEmailCounter > 0 {
		m.t.Errorf("Expected %d calls to UserStoreMock.GetByEmail at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetByEmailMock.expectedInvocations), m.GetByEmailMock.expectedInvocationsOrigin, afterGetByEmailCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserStoreMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetByEmailInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserStoreMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserStoreMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByEmailDone()
}
