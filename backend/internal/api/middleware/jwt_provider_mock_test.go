// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package middleware

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/buffi-buchi/invest-compass/backend/internal/domain/model"
	"github.com/gojuno/minimock/v3"
)

// JWTProviderMock implements JWTProvider
type JWTProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcValidate          func(token string) (a1 model.AuthClaims, err error)
	funcValidateOrigin    string
	inspectFuncValidate   func(token string)
	afterValidateCounter  uint64
	beforeValidateCounter uint64
	ValidateMock          mJWTProviderMockValidate
}

// NewJWTProviderMock returns a mock for JWTProvider
func NewJWTProviderMock(t minimock.Tester) *JWTProviderMock {
	m := &JWTProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ValidateMock = mJWTProviderMockValidate{mock: m}
	m.ValidateMock.callArgs = []*JWTProviderMockValidateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mJWTProviderMockValidate struct {
	optional           bool
	mock               *JWTProviderMock
	defaultExpectation *JWTProviderMockValidateExpectation
	expectations       []*JWTProviderMockValidateExpectation

	callArgs []*JWTProviderMockValidateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// JWTProviderMockValidateExpectation specifies expectation struct of the JWTProvider.Validate
type JWTProviderMockValidateExpectation struct {
	mock               *JWTProviderMock
	params             *JWTProviderMockValidateParams
	paramPtrs          *JWTProviderMockValidateParamPtrs
	expectationOrigins JWTProviderMockValidateExpectationOrigins
	results            *JWTProviderMockValidateResults
	returnOrigin       string
	Counter            uint64
}

// JWTProviderMockValidateParams contains parameters of the JWTProvider.Validate
type JWTProviderMockValidateParams struct {
	token string
}

// JWTProviderMockValidateParamPtrs contains pointers to parameters of the JWTProvider.Validate
type JWTProviderMockValidateParamPtrs struct {
	token *string
}

// JWTProviderMockValidateResults contains results of the JWTProvider.Validate
type JWTProviderMockValidateResults struct {
	a1  model.AuthClaims
	err error
}

// JWTProviderMockValidateOrigins contains origins of expectations of the JWTProvider.Validate
type JWTProviderMockValidateExpectationOrigins struct {
	origin      string
	originToken string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidate *mJWTProviderMockValidate) Optional() *mJWTProviderMockValidate {
	mmValidate.optional = true
	return mmValidate
}

// Expect sets up expected params for JWTProvider.Validate
func (mmValidate *mJWTProviderMockValidate) Expect(token string) *mJWTProviderMockValidate {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("JWTProviderMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &JWTProviderMockValidateExpectation{}
	}

	if mmValidate.defaultExpectation.paramPtrs != nil {
		mmValidate.mock.t.Fatalf("JWTProviderMock.Validate mock is already set by ExpectParams functions")
	}

	mmValidate.defaultExpectation.params = &JWTProviderMockValidateParams{token}
	mmValidate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidate.expectations {
		if minimock.Equal(e.params, mmValidate.defaultExpectation.params) {
			mmValidate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidate.defaultExpectation.params)
		}
	}

	return mmValidate
}

// ExpectTokenParam1 sets up expected param token for JWTProvider.Validate
func (mmValidate *mJWTProviderMockValidate) ExpectTokenParam1(token string) *mJWTProviderMockValidate {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("JWTProviderMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &JWTProviderMockValidateExpectation{}
	}

	if mmValidate.defaultExpectation.params != nil {
		mmValidate.mock.t.Fatalf("JWTProviderMock.Validate mock is already set by Expect")
	}

	if mmValidate.defaultExpectation.paramPtrs == nil {
		mmValidate.defaultExpectation.paramPtrs = &JWTProviderMockValidateParamPtrs{}
	}
	mmValidate.defaultExpectation.paramPtrs.token = &token
	mmValidate.defaultExpectation.expectationOrigins.originToken = minimock.CallerInfo(1)

	return mmValidate
}

// Inspect accepts an inspector function that has same arguments as the JWTProvider.Validate
func (mmValidate *mJWTProviderMockValidate) Inspect(f func(token string)) *mJWTProviderMockValidate {
	if mmValidate.mock.inspectFuncValidate != nil {
		mmValidate.mock.t.Fatalf("Inspect function is already set for JWTProviderMock.Validate")
	}

	mmValidate.mock.inspectFuncValidate = f

	return mmValidate
}

// Return sets up results that will be returned by JWTProvider.Validate
func (mmValidate *mJWTProviderMockValidate) Return(a1 model.AuthClaims, err error) *JWTProviderMock {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("JWTProviderMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &JWTProviderMockValidateExpectation{mock: mmValidate.mock}
	}
	mmValidate.defaultExpectation.results = &JWTProviderMockValidateResults{a1, err}
	mmValidate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidate.mock
}

// Set uses given function f to mock the JWTProvider.Validate method
func (mmValidate *mJWTProviderMockValidate) Set(f func(token string) (a1 model.AuthClaims, err error)) *JWTProviderMock {
	if mmValidate.defaultExpectation != nil {
		mmValidate.mock.t.Fatalf("Default expectation is already set for the JWTProvider.Validate method")
	}

	if len(mmValidate.expectations) > 0 {
		mmValidate.mock.t.Fatalf("Some expectations are already set for the JWTProvider.Validate method")
	}

	mmValidate.mock.funcValidate = f
	mmValidate.mock.funcValidateOrigin = minimock.CallerInfo(1)
	return mmValidate.mock
}

// When sets expectation for the JWTProvider.Validate which will trigger the result defined by the following
// Then helper
func (mmValidate *mJWTProviderMockValidate) When(token string) *JWTProviderMockValidateExpectation {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("JWTProviderMock.Validate mock is already set by Set")
	}

	expectation := &JWTProviderMockValidateExpectation{
		mock:               mmValidate.mock,
		params:             &JWTProviderMockValidateParams{token},
		expectationOrigins: JWTProviderMockValidateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidate.expectations = append(mmValidate.expectations, expectation)
	return expectation
}

// Then sets up JWTProvider.Validate return parameters for the expectation previously defined by the When method
func (e *JWTProviderMockValidateExpectation) Then(a1 model.AuthClaims, err error) *JWTProviderMock {
	e.results = &JWTProviderMockValidateResults{a1, err}
	return e.mock
}

// Times sets number of times JWTProvider.Validate should be invoked
func (mmValidate *mJWTProviderMockValidate) Times(n uint64) *mJWTProviderMockValidate {
	if n == 0 {
		mmValidate.mock.t.Fatalf("Times of JWTProviderMock.Validate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidate.expectedInvocations, n)
	mmValidate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidate
}

func (mmValidate *mJWTProviderMockValidate) invocationsDone() bool {
	if len(mmValidate.expectations) == 0 && mmValidate.defaultExpectation == nil && mmValidate.mock.funcValidate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidate.mock.afterValidateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Validate implements JWTProvider
func (mmValidate *JWTProviderMock) Validate(token string) (a1 model.AuthClaims, err error) {
	mm_atomic.AddUint64(&mmValidate.beforeValidateCounter, 1)
	defer mm_atomic.AddUint64(&mmValidate.afterValidateCounter, 1)

	mmValidate.t.Helper()

	if mmValidate.inspectFuncValidate != nil {
		mmValidate.inspectFuncValidate(token)
	}

	mm_params := JWTProviderMockValidateParams{token}

	// Record call args
	mmValidate.ValidateMock.mutex.Lock()
	mmValidate.ValidateMock.callArgs = append(mmValidate.ValidateMock.callArgs, &mm_params)
	mmValidate.ValidateMock.mutex.Unlock()

	for _, e := range mmValidate.ValidateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1, e.results.err
		}
	}

	if mmValidate.ValidateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidate.ValidateMock.defaultExpectation.Counter, 1)
		mm_want := mmValidate.ValidateMock.defaultExpectation.params
		mm_want_ptrs := mmValidate.ValidateMock.defaultExpectation.paramPtrs

		mm_got := JWTProviderMockValidateParams{token}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.token != nil && !minimock.Equal(*mm_want_ptrs.token, mm_got.token) {
				mmValidate.t.Errorf("JWTProviderMock.Validate got unexpected parameter token, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidate.ValidateMock.defaultExpectation.expectationOrigins.originToken, *mm_want_ptrs.token, mm_got.token, minimock.Diff(*mm_want_ptrs.token, mm_got.token))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidate.t.Errorf("JWTProviderMock.Validate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidate.ValidateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidate.ValidateMock.defaultExpectation.results
		if mm_results == nil {
			mmValidate.t.Fatal("No results are set for the JWTProviderMock.Validate")
		}
		return (*mm_results).a1, (*mm_results).err
	}
	if mmValidate.funcValidate != nil {
		return mmValidate.funcValidate(token)
	}
	mmValidate.t.Fatalf("Unexpected call to JWTProviderMock.Validate. %v", token)
	return
}

// ValidateAfterCounter returns a count of finished JWTProviderMock.Validate invocations
func (mmValidate *JWTProviderMock) ValidateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidate.afterValidateCounter)
}

// ValidateBeforeCounter returns a count of JWTProviderMock.Validate invocations
func (mmValidate *JWTProviderMock) ValidateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidate.beforeValidateCounter)
}

// Calls returns a list of arguments used in each call to JWTProviderMock.Validate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidate *mJWTProviderMockValidate) Calls() []*JWTProviderMockValidateParams {
	mmValidate.mutex.RLock()

	argCopy := make([]*JWTProviderMockValidateParams, len(mmValidate.callArgs))
	copy(argCopy, mmValidate.callArgs)

	mmValidate.mutex.RUnlock()

	return argCopy
}

// MinimockValidateDone returns true if the count of the Validate invocations corresponds
// the number of defined expectations
func (m *JWTProviderMock) MinimockValidateDone() bool {
	if m.ValidateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateMock.invocationsDone()
}

// MinimockValidateInspect logs each unmet expectation
func (m *JWTProviderMock) MinimockValidateInspect() {
	for _, e := range m.ValidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to JWTProviderMock.Validate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateCounter := mm_atomic.LoadUint64(&m.afterValidateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateMock.defaultExpectation != nil && afterValidateCounter < 1 {
		if m.ValidateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to JWTProviderMock.Validate at\n%s", m.ValidateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to JWTProviderMock.Validate at\n%s with params: %#v", m.ValidateMock.defaultExpectation.expectationOrigins.origin, *m.ValidateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidate != nil && afterValidateCounter < 1 {
		m.t.Errorf("Expected call to JWTProviderMock.Validate at\n%s", m.funcValidateOrigin)
	}

	if !m.ValidateMock.invocationsDone() && afterValidateCounter > 0 {
		m.t.Errorf("Expected %d calls to JWTProviderMock.Validate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateMock.expectedInvocations), m.ValidateMock.expectedInvocationsOrigin, afterValidateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *JWTProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockValidateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *JWTProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *JWTProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockValidateDone()
}
